name: Build the MacOS flutter version of the StarDesk

on:
  workflow_call:
    inputs:
      upload-artifact:
        type: boolean
        default: true
      upload-tag:
        type: string
        default: "nightly"

env:
  CARGO_NDK_VERSION: "3.1.2"
  LLVM_VERSION: "15.0.6"
  FLUTTER_VERSION: "3.13.9"
  FLUTTER_RUST_BRIDGE_VERSION: "1.80.1"
  # for arm64 linux because official Dart SDK does not work
  FLUTTER_ELINUX_VERSION: "3.13.9"
  FLUTTER_ELINUX_COMMIT_ID: "f4d4205893c16b0aa9cb6ba46b9f32b639d3b057"
  TAG_NAME: "${{ inputs.upload-tag }}"
  VCPKG_BINARY_SOURCES: "clear;x-gha,readwrite"
  # vcpkg version: 2023.10.19
  # for multiarch gcc compatibility
  VCPKG_COMMIT_ID: "8eb57355a4ffb410a2e94c07b4dca2dffbee8e50"
  VERSION: "1.2.4"
  NDK_VERSION: "r26b"
  #signing keys env variable checks
  ANDROID_SIGNING_KEY: '${{ secrets.ANDROID_SIGNING_KEY }}'
  # MACOS_P12_BASE64: '${{ secrets.MACOS_P12_BASE64 }}'
  MACOS_P12_BASE64: '${{ secrets.MACOS_P12_BASE64 }}'
  MACOS_P12_PASSWORD: '${{ secrets.MACOS_P12_PASSWORD }}'
  # To make a custom build with your own servers set the below secret values
  RS_PUB_KEY: '${{ secrets.RS_PUB_KEY }}'
  RENDEZVOUS_SERVER: '${{ secrets.RENDEZVOUS_SERVER }}'
  API_SERVER: '${{ secrets.API_SERVER }}'
  UPLOAD_ARTIFACT: "${{ inputs.upload-artifact }}"

jobs:
  build-for-macOS:
    name: ${{ matrix.job.target }} (${{ matrix.job.os }}) [${{ matrix.job.extra-build-args }}]
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - {
              target: x86_64-apple-darwin,
              os: macos-latest,
              extra-build-args: "",
              arch: x86_64
            }
    steps:
      - name: Export GitHub Actions cache environment variables
        uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout source code
        uses: actions/checkout@v3

      # - name: Import the codesign cert
      #   if: env.MACOS_P12_BASE64 != null
      #   uses: apple-actions/import-codesign-certs@v1
      #   with:
      #     p12-file-base64: ${{ secrets.MACOS_P12_BASE64 }}
      #     p12-password: ${{ secrets.MACOS_P12_PASSWORD }}
      #     keychain: rustdesk

      # - name: Check sign and import sign key
      #   if: env.MAC_BUILD_CERTIFICATE_BASE64 != null
      #   run: |
      #     security default-keychain -s rustdesk.keychain
      #     security find-identity -v

      # - name: Import notarize key
      #   if: env.MACOS_P12_BASE64 != null
      #   uses: timheuer/base64-to-file@v1.2
      #   with:
      #     # https://gregoryszorc.com/docs/apple-codesign/stable/apple_codesign_rcodesign.html#notarizing-and-stapling
      #     fileName: stardesk.json
      #     fileDir: ${{ github.workspace }}
      #     encodedString: ${{ secrets.MACOS_NOTARIZE_JSON }}

      - name: Install rcodesign tool
        if: env.MACOS_P12_BASE64 != null
        shell: bash
        run: |
          pushd /tmp
          wget https://github.com/indygreg/apple-platform-rs/releases/download/apple-codesign%2F0.22.0/apple-codesign-0.22.0-macos-universal.tar.gz
          tar -zxvf apple-codesign-0.22.0-macos-universal.tar.gz
          mv apple-codesign-0.22.0-macos-universal/rcodesign /usr/local/bin
          popd

      - name: Install build runtime
        run: |
          brew install llvm create-dmg nasm cmake gcc wget ninja pkg-config

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: ${{ matrix.job.target }}
          components: ''

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.job.os }}

      - name: Install flutter rust bridge deps
        shell: bash
        run: |
          # 1.80.1
          cargo install flutter_rust_bridge_codegen --version ${{ env.FLUTTER_RUST_BRIDGE_VERSION }} --features "uuid"
          pushd flutter && flutter pub get && popd
          ~/.cargo/bin/flutter_rust_bridge_codegen --rust-input ./src/flutter_ffi.rs --dart-output ./flutter/lib/generated_bridge.dart --c-output ./flutter/macos/Runner/bridge_generated.h

      - name: Setup vcpkg with Github Actions binary cache
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT_ID }}

      - name: Install vcpkg dependencies
        run: |
          $VCPKG_ROOT/vcpkg install --x-install-root="$VCPKG_ROOT/installed"

      - name: Show version information (Rust, cargo, Clang)
        shell: bash
        run: |
          clang --version || true
          rustup -V
          rustup toolchain list
          rustup default
          cargo -V
          rustc -V

      - name: Install the Apple certificate and provisioning profile
        if: env.MACOS_P12_BASE64 != null && env.UPLOAD_ARTIFACT == 'true'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.provisionprofile
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$MACOS_P12_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$MACOS_BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$MACOS_P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build stardesk
        run: |
          # --hwcodec not supported on macos yet
          ./build.py --flutter ${{ matrix.job.extra-build-args }}

      # - name: Codesign app and create signed dmg
      #   if: env.MACOS_P12_BASE64 != null && env.UPLOAD_ARTIFACT == 'true'
      #   run: |
      #     # Patch create-dmg to give more attempts to unmount image
      #     CREATE_DMG="$(command -v create-dmg)"
      #     CREATE_DMG="$(readlink -f "$CREATE_DMG")"
      #     sed -i -e 's/MAXIMUM_UNMOUNTING_ATTEMPTS=3/MAXIMUM_UNMOUNTING_ATTEMPTS=7/' "$CREATE_DMG"
      #     # Unlock keychain
      #     # security default-keychain -s rustdesk.keychain
      #     # security unlock-keychain -p ${{ secrets.MACOS_P12_PASSWORD }} rustdesk.keychain
      #     # start sign the StarDesk.app and dmg
      #     rm stardesk-${{ env.VERSION }}.dmg || true
      #     codesign --force --options runtime -s ${{ secrets.MACOS_CODESIGN_IDENTITY }} --deep --strict ./flutter/build/macos/Build/Products/Release/StarDesk.app -vvv
      #     create-dmg --icon "StarDesk.app" 200 190 --hide-extension "StarDesk.app" --window-size 800 400 --app-drop-link 600 185 stardesk-${{ env.VERSION }}.dmg ./flutter/build/macos/Build/Products/Release/StarDesk.app
      #     codesign --force --options runtime -s ${{ secrets.MACOS_CODESIGN_IDENTITY }} --deep --strict ruststardeskdesk-${{ env.VERSION }}.dmg -vvv
      #     # notarize the stardesk-${{ env.VERSION }}.dmg
      #     # rcodesign notary-submit --api-key-path ${{ github.workspace }}/stardesk.json  --staple stardesk-${{ env.VERSION }}.dmg

      - name: Rename stardesk
        if: env.UPLOAD_ARTIFACT == 'true'
        run: |
          for name in rustdesk*??.dmg; do
              mv "$name" "${name%%.dmg}-${{ matrix.job.arch }}.dmg"
          done

      - name: Publish DMG package
        if: env.UPLOAD_ARTIFACT == 'true'
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true
          tag_name: ${{ env.TAG_NAME }}
          files: |
            stardesk*-${{ matrix.job.arch }}.dmg
      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.provisionprofile