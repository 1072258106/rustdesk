// This code was autogenerated with `dbus-codegen-rust -c blocking -m None`, see https://github.com/diwic/dbus-rs
// https://github.com/flatpak/xdg-desktop-portal/blob/main/data/org.freedesktop.portal.Clipboard.xml
use dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus::blocking;

pub trait OrgFreedesktopPortalClipboard {
    fn request_clipboard(
        &self,
        session_handle: dbus::Path,
        options: arg::PropMap,
    ) -> Result<(), dbus::Error>;
    fn set_selection(
        &self,
        session_handle: dbus::Path,
        options: arg::PropMap,
    ) -> Result<(), dbus::Error>;
    fn selection_write(
        &self,
        session_handle: dbus::Path,
        serial: u32,
    ) -> Result<arg::OwnedFd, dbus::Error>;
    fn selection_write_done(
        &self,
        session_handle: dbus::Path,
        serial: u32,
        success: bool,
    ) -> Result<(), dbus::Error>;
    fn selection_read(
        &self,
        session_handle: dbus::Path,
        mime_type: &str,
    ) -> Result<arg::OwnedFd, dbus::Error>;
    fn version(&self) -> Result<u32, dbus::Error>;
}

#[derive(Debug)]
pub struct OrgFreedesktopPortalClipboardSelectionOwnerChanged {
    pub session_handle: dbus::Path<'static>,
    pub options: arg::PropMap,
}

impl arg::AppendAll for OrgFreedesktopPortalClipboardSelectionOwnerChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.session_handle, i);
        arg::RefArg::append(&self.options, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPortalClipboardSelectionOwnerChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPortalClipboardSelectionOwnerChanged {
            session_handle: i.read()?,
            options: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPortalClipboardSelectionOwnerChanged {
    const NAME: &'static str = "SelectionOwnerChanged";
    const INTERFACE: &'static str = "org.freedesktop.portal.Clipboard";
}

#[derive(Debug)]
pub struct OrgFreedesktopPortalClipboardSelectionTransfer {
    pub session_handle: dbus::Path<'static>,
    pub mime_type: String,
    pub serial: u32,
}

impl arg::AppendAll for OrgFreedesktopPortalClipboardSelectionTransfer {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.session_handle, i);
        arg::RefArg::append(&self.mime_type, i);
        arg::RefArg::append(&self.serial, i);
    }
}

impl arg::ReadAll for OrgFreedesktopPortalClipboardSelectionTransfer {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopPortalClipboardSelectionTransfer {
            session_handle: i.read()?,
            mime_type: i.read()?,
            serial: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopPortalClipboardSelectionTransfer {
    const NAME: &'static str = "SelectionTransfer";
    const INTERFACE: &'static str = "org.freedesktop.portal.Clipboard";
}

impl<'a, T: blocking::BlockingSender, C: ::std::ops::Deref<Target = T>>
    OrgFreedesktopPortalClipboard for blocking::Proxy<'a, C>
{
    fn request_clipboard(
        &self,
        session_handle: dbus::Path,
        options: arg::PropMap,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.portal.Clipboard",
            "RequestClipboard",
            (session_handle, options),
        )
    }

    fn set_selection(
        &self,
        session_handle: dbus::Path,
        options: arg::PropMap,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.portal.Clipboard",
            "SetSelection",
            (session_handle, options),
        )
    }

    fn selection_write(
        &self,
        session_handle: dbus::Path,
        serial: u32,
    ) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call(
            "org.freedesktop.portal.Clipboard",
            "SelectionWrite",
            (session_handle, serial),
        )
        .and_then(|r: (arg::OwnedFd,)| Ok(r.0))
    }

    fn selection_write_done(
        &self,
        session_handle: dbus::Path,
        serial: u32,
        success: bool,
    ) -> Result<(), dbus::Error> {
        self.method_call(
            "org.freedesktop.portal.Clipboard",
            "SelectionWriteDone",
            (session_handle, serial, success),
        )
    }

    fn selection_read(
        &self,
        session_handle: dbus::Path,
        mime_type: &str,
    ) -> Result<arg::OwnedFd, dbus::Error> {
        self.method_call(
            "org.freedesktop.portal.Clipboard",
            "SelectionRead",
            (session_handle, mime_type),
        )
        .and_then(|r: (arg::OwnedFd,)| Ok(r.0))
    }

    fn version(&self) -> Result<u32, dbus::Error> {
        <Self as blocking::stdintf::org_freedesktop_dbus::Properties>::get(
            &self,
            "org.freedesktop.portal.Clipboard",
            "version",
        )
    }
}
